// Generated by CoffeeScript 1.9.0
(function() {
  var Brain, Q, Redis, RedisBrain, Url, User, msgpack, _, _ref,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  _ref = require('brobbot'), Brain = _ref.Brain, User = _ref.User;

  Url = require("url");

  Redis = require("redis");

  Q = require("q");

  _ = require("lodash");

  msgpack = require("msgpack");

  RedisBrain = (function(_super) {
    __extends(RedisBrain, _super);

    function RedisBrain(_at_robot, _at_useMsgpack) {
      var connectedDefer, envVar, redisUrl, urlEnv, _i, _len, _ref1, _ref2;
      this.robot = _at_robot;
      this.useMsgpack = _at_useMsgpack != null ? _at_useMsgpack : true;
      RedisBrain.__super__.constructor.call(this, this.robot);
      redisUrl = null;
      urlEnv = null;
      _ref1 = ['REDISTOGO_URL', 'REDISCLOUD_URL', 'BOXEN_REDIS_URL', 'REDIS_URL'];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        envVar = _ref1[_i];
        if (process.env[envVar]) {
          urlEnv = envVar;
          redisUrl = process.env[envVar];
          break;
        }
      }
      if (!redisUrl) {
        redisUrl = 'redis://localhost:6379';
      }
      if (urlEnv != null) {
        this.robot.logger.info("Discovered redis from " + urlEnv + " environment variable");
      } else {
        this.robot.logger.info("Using default redis on localhost:6379");
      }
      this.info = Url.parse(redisUrl, true);
      this.client = Redis.createClient(this.info.port, this.info.hostname, {
        return_buffers: true
      });
      this.prefix = ((_ref2 = this.info.path) != null ? _ref2.replace('/', '') : void 0) || 'brobbot';
      this.dataPrefix = process.env.BROBBOT_REDIS_DATA_PREFIX || 'data';
      this.prefixRegex = new RegExp("^" + this.prefix + ":");
      this.dataPrefixRegex = new RegExp("^" + this.dataPrefix + ":");
      connectedDefer = Q.defer();
      this.connected = connectedDefer.promise;
      this.client.on("connect", connectedDefer.resolve.bind(connectedDefer));
      this.connected.then((function(_this) {
        return function() {
          return _this.robot.logger.info("Successfully connected to Redis");
        };
      })(this));
      this.connected.fail((function(_this) {
        return function(err) {
          return _this.robot.logger.error("Failed to connect to Redis: " + err);
        };
      })(this));
      if (this.info.auth) {
        this.authed = Q.ninvoke(this.client, "auth", this.info.auth.split(":")[1]);
        this.authed.then(function() {
          return this.robot.logger.info("Successfully authenticated to Redis");
        });
        this.authed.fail(function() {
          return this.robot.logger.error("Failed to authenticate to Redis");
        });
      } else {
        this.authed = Q();
      }
      this.ready = Q.all([this.connected, this.authed]);
    }

    RedisBrain.prototype.reset = function() {
      return this.keys().then((function(_this) {
        return function(keys) {
          return Q.all(_.map(keys, function(key) {
            return _this.remove(key);
          }));
        };
      })(this));
    };

    RedisBrain.prototype.llen = function(key) {
      return this.ready.then((function(_this) {
        return function() {
          return Q.ninvoke(_this.client, 'llen', _this.key(key)).then(function(val) {
            return parseInt(val.toString());
          });
        };
      })(this));
    };

    RedisBrain.prototype.lset = function(key, index, value) {
      return this.ready.then((function(_this) {
        return function() {
          return Q.ninvoke(_this.client, 'lset', _this.key(key), index, _this.serialize(value));
        };
      })(this));
    };

    RedisBrain.prototype.linsert = function(key, placement, pivot, value) {
      return this.ready.then((function(_this) {
        return function() {
          return Q.ninvoke(_this.client, 'linsert', _this.key(key), placement, _this.serialize(pivot), _this.serialize(value)).then(function(val) {
            return parseInt(val.toString());
          });
        };
      })(this));
    };

    RedisBrain.prototype.lpush = function(key, value) {
      return this.ready.then((function(_this) {
        return function() {
          return Q.ninvoke(_this.client, 'lpush', _this.key(key), _this.serialize(value));
        };
      })(this));
    };

    RedisBrain.prototype.rpush = function(key, value) {
      return this.ready.then((function(_this) {
        return function() {
          return Q.ninvoke(_this.client, 'rpush', _this.key(key), _this.serialize(value));
        };
      })(this));
    };

    RedisBrain.prototype.lpop = function(key) {
      return this.ready.then((function(_this) {
        return function() {
          return Q.ninvoke(_this.client, 'lpop', _this.key(key)).then(_this.deserialize.bind(_this));
        };
      })(this));
    };

    RedisBrain.prototype.rpop = function(key) {
      return this.ready.then((function(_this) {
        return function() {
          return Q.ninvoke(_this.client, 'rpop', _this.key(key)).then(_this.deserialize.bind(_this));
        };
      })(this));
    };

    RedisBrain.prototype.lindex = function(key, index) {
      return this.ready.then((function(_this) {
        return function() {
          return Q.ninvoke(_this.client, 'lindex', _this.key(key), index).then(_this.deserialize.bind(_this));
        };
      })(this));
    };

    RedisBrain.prototype.lgetall = function(key) {
      return this.lrange(key, 0, -1);
    };

    RedisBrain.prototype.lrange = function(key, start, end) {
      return this.ready.then((function(_this) {
        return function() {
          return Q.ninvoke(_this.client, 'lrange', _this.key(key), start, end).then(function(values) {
            return _.map(values, _this.deserialize.bind(_this));
          });
        };
      })(this));
    };

    RedisBrain.prototype.lrem = function(key, value) {
      return this.ready.then((function(_this) {
        return function() {
          return Q.ninvoke(_this.client, 'lrem', _this.key(key), 0, _this.serialize(value)).then(function(count) {
            return parseInt(count.toString());
          });
        };
      })(this));
    };

    RedisBrain.prototype.sadd = function(key, value) {
      return this.ready.then((function(_this) {
        return function() {
          return Q.ninvoke(_this.client, 'sadd', _this.key(key), _this.serialize(value)).then(function(val) {
            return Q();
          });
        };
      })(this));
    };

    RedisBrain.prototype.sismember = function(key, value) {
      return this.ready.then((function(_this) {
        return function() {
          return Q.ninvoke(_this.client, 'sismember', _this.key(key), _this.serialize(value)).then(function(val) {
            return parseInt(val.toString()) === 1;
          });
        };
      })(this));
    };

    RedisBrain.prototype.srem = function(key, value) {
      return this.ready.then((function(_this) {
        return function() {
          return Q.ninvoke(_this.client, 'srem', _this.key(key), _this.serialize(value));
        };
      })(this));
    };

    RedisBrain.prototype.scard = function(key) {
      return this.ready.then((function(_this) {
        return function() {
          return Q.ninvoke(_this.client, 'scard', _this.key(key)).then(function(size) {
            return parseInt(size.toString());
          });
        };
      })(this));
    };

    RedisBrain.prototype.spop = function(key) {
      return this.ready.then((function(_this) {
        return function() {
          return Q.ninvoke(_this.client, 'spop', _this.key(key)).then(_this.deserialize.bind(_this));
        };
      })(this));
    };

    RedisBrain.prototype.srandmember = function(key) {
      return this.ready.then((function(_this) {
        return function() {
          return Q.ninvoke(_this.client, 'srandmember', _this.key(key)).then(_this.deserialize.bind(_this));
        };
      })(this));
    };

    RedisBrain.prototype.smembers = function(key) {
      return this.ready.then((function(_this) {
        return function() {
          return Q.ninvoke(_this.client, 'smembers', _this.key(key)).then(function(values) {
            return _.map(values, _this.deserialize.bind(_this));
          });
        };
      })(this));
    };

    RedisBrain.prototype.keys = function(searchKey) {
      if (searchKey == null) {
        searchKey = '';
      }
      searchKey = this.key(searchKey);
      return this.ready.then((function(_this) {
        return function() {
          return Q.ninvoke(_this.client, "keys", searchKey + "*").then(function(keys) {
            return _.map(keys, function(key) {
              return _this.unkey(key.toString());
            });
          });
        };
      })(this));
    };

    RedisBrain.prototype.type = function(key) {
      return this.ready.then((function(_this) {
        return function() {
          return Q.ninvoke(_this.client, 'type', _this.key(key)).then(function(result) {
            result = result.toString();
            if (result === 'string') {
              return 'object';
            }
            return result;
          });
        };
      })(this));
    };

    RedisBrain.prototype.types = function(keys) {
      return this.ready.then((function(_this) {
        return function() {
          return Q.all(_.map(keys, function(key) {
            return _this.type(key);
          }));
        };
      })(this));
    };

    RedisBrain.prototype.unkey = function(key) {
      return key.replace(this.prefixRegex, '').replace(this.dataPrefixRegex, '');
    };

    RedisBrain.prototype.key = function(key) {
      return this.prefix + ":" + this.dataPrefix + ":" + key;
    };

    RedisBrain.prototype.usersKey = function() {
      return this.prefix + ":users";
    };

    RedisBrain.prototype.exists = function(key) {
      return this.ready.then((function(_this) {
        return function() {
          return Q.ninvoke(_this.client, 'exists', _this.key(key)).then(function(exists) {
            return exists.toString() === '1';
          });
        };
      })(this));
    };

    RedisBrain.prototype.get = function(key) {
      return this.ready.then((function(_this) {
        return function() {
          return Q.ninvoke(_this.client, "get", _this.key(key)).then(_this.deserialize.bind(_this));
        };
      })(this));
    };

    RedisBrain.prototype.set = function(key, value) {
      return this.ready.then((function(_this) {
        return function() {
          return Q.ninvoke(_this.client, "set", _this.key(key), _this.serialize(value));
        };
      })(this));
    };

    RedisBrain.prototype.remove = function(key) {
      return this.ready.then((function(_this) {
        return function() {
          return Q.ninvoke(_this.client, 'del', _this.key(key));
        };
      })(this));
    };

    RedisBrain.prototype.incrby = function(key, num) {
      return this.ready.then((function(_this) {
        return function() {
          return Q.ninvoke(_this.client, 'incrby', _this.key(key), num).then(function(val) {
            return parseInt(val.toString());
          });
        };
      })(this));
    };

    RedisBrain.prototype.hkeys = function(table) {
      return this.ready.then((function(_this) {
        return function() {
          return Q.ninvoke(_this.client, 'hkeys', _this.key(table)).then(function(results) {
            return _.map(results, function(result) {
              return result.toString();
            });
          });
        };
      })(this));
    };

    RedisBrain.prototype.hvals = function(table) {
      return this.ready.then((function(_this) {
        return function() {
          return Q.ninvoke(_this.client, 'hvals', _this.key(table)).then(function(list) {
            return _.map(list, _this.deserialize.bind(_this));
          });
        };
      })(this));
    };

    RedisBrain.prototype.hlen = function(table) {
      return this.ready.then((function(_this) {
        return function() {
          return Q.ninvoke(_this.client, 'hlen', _this.key(table)).then(function(val) {
            return parseInt(val.toString());
          });
        };
      })(this));
    };

    RedisBrain.prototype.hset = function(table, key, value) {
      return this.ready.then((function(_this) {
        return function() {
          return Q.ninvoke(_this.client, 'hset', _this.key(table), key, _this.serialize(value));
        };
      })(this));
    };

    RedisBrain.prototype.hget = function(table, key) {
      return this.ready.then((function(_this) {
        return function() {
          return Q.ninvoke(_this.client, 'hget', _this.key(table), key).then(_this.deserialize.bind(_this));
        };
      })(this));
    };

    RedisBrain.prototype.hdel = function(table, key) {
      return this.ready.then((function(_this) {
        return function() {
          return Q.ninvoke(_this.client, 'hdel', _this.key(table), key);
        };
      })(this));
    };

    RedisBrain.prototype.hgetall = function(table) {
      return this.ready.then((function(_this) {
        return function() {
          return Q.ninvoke(_this.client, 'hgetall', _this.key(table)).then(function(obj) {
            var map;
            map = new Map();
            _.each(obj, function(val, key) {
              return map.set(key, _this.deserialize(val));
            });
            return map;
          });
        };
      })(this));
    };

    RedisBrain.prototype.hincrby = function(table, key, num) {
      return this.ready.then((function(_this) {
        return function() {
          return Q.ninvoke(_this.client, 'hincrby', _this.key(table), key, num).then(function(val) {
            return parseInt(val.toString());
          });
        };
      })(this));
    };

    RedisBrain.prototype.close = function() {
      return this.client.quit();
    };

    RedisBrain.prototype.serialize = function(value) {
      if (this.useMsgpack) {
        if (_.isObject(value)) {
          return msgpack.pack(value);
        }
        return value.toString();
      }
      return JSON.stringify(value);
    };

    RedisBrain.prototype.deserialize = function(value) {
      var result;
      if (value === void 0 || value === null) {
        return null;
      }
      if (this.useMsgpack) {
        result = msgpack.unpack(value);
        if (result === void 0 || !_.isObject(result)) {
          result = value.toString();
        }
        return result;
      }
      return JSON.parse(value.toString());
    };

    RedisBrain.prototype.serializeUser = function(user) {
      return this.serialize(user);
    };

    RedisBrain.prototype.deserializeUser = function(obj) {
      obj = this.deserialize(obj);
      if (obj && obj.id) {
        return new User(obj.id, obj);
      }
      return null;
    };

    RedisBrain.prototype.users = function() {
      return this.ready.then((function(_this) {
        return function() {
          return Q.ninvoke(_this.client, 'hgetall', _this.usersKey()).then(function(users) {
            return _.mapValues(users, _this.deserializeUser.bind(_this));
          });
        };
      })(this));
    };

    RedisBrain.prototype.addUser = function(user) {
      return this.ready.then((function(_this) {
        return function() {
          return Q.ninvoke(_this.client, 'hset', _this.usersKey(), user.id, _this.serializeUser(user)).then(function() {
            return user;
          });
        };
      })(this));
    };

    RedisBrain.prototype.userForId = function(id, options) {
      return this.ready.then((function(_this) {
        return function() {
          return Q.ninvoke(_this.client, 'hget', _this.usersKey(), id).then(function(user) {
            if (user) {
              user = _this.deserializeUser(user);
            }
            if (!user || (options && options.room && (user.room !== options.room))) {
              return _this.addUser(new User(id, options));
            }
            return user;
          });
        };
      })(this));
    };

    RedisBrain.prototype.userForName = function(name) {
      name = name.toLowerCase();
      return this.users().then(function(users) {
        return _.find(users, function(user) {
          return user.name && user.name.toString().toLowerCase() === name;
        });
      });
    };

    RedisBrain.prototype.usersForRawFuzzyName = function(fuzzyName) {
      fuzzyName = fuzzyName.toLowerCase();
      return this.users().then(function(users) {
        return _.filter(users, function(user) {
          return user && user.name && user.name.toString().toLowerCase().indexOf(fuzzyName) === 0;
        });
      });
    };

    RedisBrain.prototype.usersForFuzzyName = function(fuzzyName) {
      fuzzyName = fuzzyName.toLowerCase();
      return this.usersForRawFuzzyName(fuzzyName).then(function(matchedUsers) {
        var exactMatch;
        exactMatch = _.find(matchedUsers, function(user) {
          return user.name.toLowerCase() === fuzzyName;
        });
        return exactMatch && [exactMatch] || matchedUsers;
      });
    };

    return RedisBrain;

  })(Brain);

  module.exports = RedisBrain;

}).call(this);
